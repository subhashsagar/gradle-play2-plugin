buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'de.undercouch:gradle-download-task:1.0'
    }
}

import de.undercouch.gradle.tasks.download.Download

ext.playVersions = ['2.2.0', '2.2.1', '2.2.2', '2.2.3', '2.2.4', '2.2.5',
                    '2.3.0', '2.3.1', '2.3.2', '2.3.3', '2.3.4', '2.3.5', '2.3.6']

task extractSamplesForAllPlayVersions

playVersions.each { playVersion ->
    task "downloadZipFileForPlay$playVersion"(type: Download) {
        src "https://github.com/playframework/playframework/archive/${playVersion}.zip"
        dest new File(buildDir, "${playVersion}.zip")
        onlyIfNewer true
    }

    task "extractSamplesForPlay$playVersion"(dependsOn: "downloadZipFileForPlay$playVersion", type: Copy) {
        from(zipTree(tasks."downloadZipFileForPlay$playVersion".dest)) {
            include "playframework-$playVersion/samples/**"
        }
        into "samples"
    }

    extractSamplesForAllPlayVersions.dependsOn tasks."extractSamplesForPlay$playVersion"
}

sourceSets {
    integTest {
        compileClasspath += sourceSets.main.output
    }
}

configurations {
    integTestCompile.extendsFrom testCompile
    integTestRuntime.extendsFrom testRuntime
}

task integTest(type: Test) {
    binResultsDir = file("${buildDir}/integTest-results/binary/integTest")
    reports.html.destination = "${buildDir}/reports/integTest"
    reports.junitXml.destination = "${buildDir}/integTest=results"
    classpath = sourceSets.integTest.runtimeClasspath
    testClassesDir = compileIntegTestJava.destinationDir
    shouldRunAfter test

    forkEvery = 1
}

check.dependsOn integTest

ext.genTestCaseDir = file("$projectDir/src/integTest/groovy")

ext.genTestCase = { projectName, lang, playVersion, scalaVersion ->
    def className = "$projectName-$playVersion-$scalaVersion".replaceAll('-', '_').replaceAll('\\.', '_')
    def packageFolder = "v$playVersion/$lang/$projectName".replaceAll('-', '_').replaceAll('\\.', '_')
    def classFile = new File(genTestCaseDir, "$packageFolder/${className}.groovy")
    classFile.parentFile.mkdirs()
    classFile.text =
            """package ${packageFolder.replaceAll('/', '.')}

public class $className extends com.github.ywelsch.play2.IntegrationTest {
    public $className() {
        super('$projectName', '$lang', '$playVersion', '$scalaVersion')
    }
}
"""
}





task generateTestClasses {
    doLast {
        playVersions.each { playVersion ->
            ['java', 'scala'].each { lang ->
                file("samples/playframework-$playVersion/samples/$lang").list().each { projectName ->
                    def scalaVersions = ['2.10']
                    if (playVersion.startsWith('2.3.')) {
                        scalaVersions << '2.11'
                    }
                    scalaVersions.each { scalaVersion ->
                        genTestCase(projectName, lang, playVersion, scalaVersion)
                        def extension = ''
                        if (scalaVersions.size() > 1) {
                            def lastVersion = scalaVersions.get(scalaVersions.size() - 1)
                            if (scalaVersion != lastVersion) {
                                extension = '-' + scalaVersion
                            }
                        }
                        file("samples/playframework-$playVersion/samples/$lang/$projectName/build${extension}.gradle").text = genBuildFile(projectName, lang, playVersion, scalaVersion)
                    }
                }
            }
        }
    }
}

compileIntegTestGroovy.dependsOn generateTestClasses

ext.genBuildFile = { projectName, lang, playVersion, scalaVersion ->

    def genericPrelude =
            """buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.ywelsch:gradle-play2-plugin:+'
    }
}

apply plugin: 'com.github.ywelsch.play2-$lang'

repositories {
    mavenCentral()
    maven {
        url 'http://repo.typesafe.com/typesafe/releases'
    }
}
"""

    def header =
            """
play2 {
    version = '$playVersion'
    scalaVersion = '$scalaVersion'"""

    if (lang == 'java' && ['computer-database', 'forms', 'zentasks'].contains(projectName)) {
        header +=
                '''
    ebeanEnabled = true'''
    }

    header +=
            '''
}
'''


    def customSettings = {
        def res = ''



        if (lang == 'java' && projectName == 'computer-database-jpa') {
            res +=
                    '''
dependencies {
    compile "com.typesafe.play:play-java-jpa_$play2.scalaVersion:$play2.version"
    compile 'org.hibernate:hibernate-entitymanager:3.6.9.Final'
}

// hack to get hibernate to work with gradle
sourceSets.main.output.resourcesDir = sourceSets.main.output.classesDir
sourceSets.test.output.resourcesDir = sourceSets.test.output.classesDir
'''
        }

        if (lang == 'scala' && projectName == 'computer-database') {
            res +=
                    '''
dependencies {
    compile "com.typesafe.play:anorm_$play2.scalaVersion:$play2.version"
    compile "com.typesafe.play:play-jdbc_$play2.scalaVersion:$play2.version"
}
'''
        }

        if (lang == 'scala' && projectName == 'zentasks') {
            res+=
                    '''
dependencies {
    compile "com.typesafe.play:anorm_$play2.scalaVersion:$play2.version"
    compile "com.typesafe.play:play-jdbc_$play2.scalaVersion:$play2.version"
}
'''
        }

        def applyLess =
                '''
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.houbie:lesscss-gradle-plugin:1.0.3-less-1.7.0'
    }
}

apply plugin: 'lesscss'

def lessResources = "$buildDir/resources/lessResources"

lessc {
    sourceDir 'app/assets'
    include '**/*.less'
    exclude '**/_*.less'
    destinationDir = "$lessResources/public"
    encoding = 'utf-8'
}

sourceSets.main.output.dir(lessResources, builtBy: 'lessc')
'''

        def applyCoffee =
                '''
apply plugin: 'coffeescript-base'

def coffeeResources = "$buildDir/resources/coffeeResources"

repositories {
    maven {
        url 'http://repo.gradle.org/gradle/javascript-public'
    }
}

task compileCoffee(type: CoffeeScriptCompile) {
    source fileTree('app/assets') {
        include '**/*.coffee'
    }
    destinationDir file("$coffeeResources/public")
}

sourceSets.main.output.dir(coffeeResources, builtBy: 'compileCoffee')
'''

        def applyJS =
                '''
def appJSResources = "$project.buildDir/resources/appJSResources"

project.tasks.create('copyAppJSResources', Sync) {
    from fileTree('app/assets') {
        include '**/*.js'
    }
    into "$appJSResources/public"
}

project.sourceSets.main.output.dir(appJSResources, builtBy: 'copyAppJSResources')
'''

        def applyMinJS =
                '''
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.eriwen:gradle-js-plugin:1.12.1'
    }
}

apply plugin: 'com.eriwen.gradle.js'

def appJSResources = "$project.buildDir/resources/appJSResources"

minifyJs {
    source = file('app/assets/javascripts/main.js')
    dest = file("$appJSResources/public/javascripts/main.min.js")
    sourceMap = file("$appJSResources/public/javascripts/main.sourcemap.json")
    closure {
        warningLevel = 'QUIET'
    }
}

project.sourceSets.main.output.dir(appJSResources, builtBy: 'minifyJs')
'''

        def applyLessMin =
                '''
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.houbie:lesscss-gradle-plugin:1.0.3-less-1.7.0'
        classpath 'com.eriwen:gradle-css-plugin:1.11.1'
    }
}

apply plugin: 'lesscss'

def lessResources = "$buildDir/resources/lessResources"

lessc {
    sourceDir 'app/assets'
    include '**/*.less'
    exclude '**/_*.less'
    destinationDir = "$lessResources/public"
    encoding = "utf-8"
}

sourceSets.main.output.dir(lessResources, builtBy: 'lessc')

apply plugin: 'css'

def appCssResources = "$buildDir/resources/appCssResources"

minifyCss {
    source = file("$lessResources/public/stylesheets/main.css")
    dest = file("$appCssResources/public/stylesheets/main.min.css")
}

tasks.minifyCss.dependsOn lessc

sourceSets.main.output.dir(appCssResources, builtBy: 'minifyCss')
'''

        if (projectName == 'zentasks') {
            res+= applyLess + applyCoffee
        }

        if (projectName == 'comet-live-monitoring') {
            res+= applyLessMin + applyMinJS
        }

        res
    }

    return genericPrelude + header + customSettings()
}